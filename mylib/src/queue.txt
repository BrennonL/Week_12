-module(queue).

%% API exports
-export([empty/1, head/1, tail/1, enqueue/2, dequeue/1, enqueue_front/2, dequeue_back/1]).

%%====================================================================
%% API functions
%%====================================================================

empty({[], []}) ->
    true;
empty({A, B}) when is_list(A) and is_list(B) ->
    false;
empty(_Not_tuple) ->
    fail.

head({Non_list1, Non_list2}) when not is_list(Non_list1) or not is_list(Non_list2) -> fail;
head({[], []}) ->
    nil;
head({[], Rear}) ->
    lists:last(Rear);
head({[H|_T], _Rear}) ->
    H;
head(_Bad_parameter) -> fail.


tail({Non_list1, Non_list2}) when not is_list(Non_list1) or not is_list(Non_list2) -> fail;
tail({[], []}) -> nil;
tail({List, []}) -> lists:last(List);
tail({_, [H | _T]}) -> H;
tail(_Bad_parameter) -> fail.


enqueue({Non_list1, Non_list2}, _) when not is_list(Non_list1) or not is_list(Non_list2) -> fail;
enqueue({[], []}, A)->
    {[A], []};
enqueue({F_list, L_list}, A) ->
    {F_list, [A] ++ L_list}.

dequeue({Non_list1, Non_list2}) when not is_list(Non_list1) or not is_list(Non_list2) -> fail;
dequeue({[], []}) ->
    {[], []};
dequeue({[_H|[]], Rear}) ->
    {lists:reverse(Rear), []};
dequeue({[_H|T], Rear}) ->
    {T, Rear}.

enqueue_front({Non_list1, Non_list2}, _A) when not is_list(Non_list1) or not is_list(Non_list2) ->
    fail;
enqueue_front({Front, Rear}, A) ->
    {[A] ++ Front, Rear}.

dequeue_back({[], []}) ->
    {[], []};
dequeue_back({Front, []}) ->
    [_H | T] = lists:reverse(Front),
    {[], T};
dequeue_back({Front, [_H|T]}) ->
    {Front, T};
dequeue_back(_Bad_parameter) -> fail.





%%====================================================================
%% Test functions
%%====================================================================

%%% Only include the eunit testing library and functions
%%% in the compiled code if testing is 
%%% being done.
-ifdef(TEST).
-include_lib("eunit/include/eunit.hrl").

empty_test_()->
	[?_assertEqual(true, empty({[],[]})),%happy path
	?_assertEqual(false, empty({[1, 3], [4, 2]})),%happy path
	?_assertEqual(false, empty({['Hi', 'How are you?'], ['Goodbye']})),%happy path
	?_assertEqual(false, empty({[dogs, cats, cows], [pigs, zebras]})),%happy path      
    ?_assertEqual(false, empty({[5], []})),
    ?_assertEqual(false, empty({[], [4]})),
    %nasty thoughts start here
    ?_assertEqual(fail, empty({1, 2, 3})),
    ?_assertEqual(fail, empty({[2], [5], [6]}))].

head_test_()->
	[?_assertEqual(nil, head({[],[]})),%happy path
	?_assertEqual(5, head({[],[4,5]})),%happy path
	?_assertEqual(6, head({[],[4, 5, 6]})),%happy path
	?_assertEqual(4, head({[4], []})),%happy path      
    ?_assertEqual(3, head({[3, 4], [4, 7, 2]})),%happy path
    %nasty thoughts start here
    ?_assertEqual(fail, head({[3, 4], [2, 7, 8], [1]})),
    ?_assertEqual(fail, head({3, 5, 6})),
    ?_assertEqual(fail, head({hello})),
    ?_assertEqual(fail, head("This is a string")),
    ?_assertEqual(fail, head({not_list, []})),
    ?_assertEqual(fail, head({[], not_list}))].


tail_test_()->
	[?_assertEqual(nil, tail({[], []})),%happy path
	?_assertEqual(3, tail({[1,2,3], []})),%happy path
	?_assertEqual(1, tail({[], [1,2,3]})),%happy path
	?_assertEqual(1, tail({[4,5,6], [1,2,3]})),%happy path      
    ?_assertEqual(1, tail({[4,5,6], [1]})),
    ?_assertEqual(6, tail({[6], []})),
    %nasty thoughts start here
    ?_assertEqual(fail, head({[3, 4], [2, 7, 8], [1]})),
    ?_assertEqual(fail, head({3, 5, 6})),
    ?_assertEqual(fail, head({hello})),
    ?_assertEqual(fail, head("This is a string")),
    ?_assertEqual(fail, head({not_list, []})),
    ?_assertEqual(fail, head({[], not_list}))].

enqueue_test_()->
	[?_assertEqual({[1], []}, enqueue({[], []}, 1)),%happy path
	?_assertEqual({[1], [2]}, enqueue({[1], []}, 2)),%happy path
	?_assertEqual({[1], [3, 2]}, enqueue({[1], [2]}, 3)),%happy path
	?_assertEqual({[1], [4, 3, 2]}, enqueue({[1], [3, 2]}, 4)),%happy path      
    ?_assertEqual({[1], [atom, 4, 3, 2]}, enqueue({[1], [4, 3, 2]}, atom)),%happy path  
    %nasty thoughts start here
    ?_assertEqual(fail, enqueue({not_list, []}, 5)),
    ?_assertEqual(fail, enqueue({[], not_list}, 7))].

dequeue_test_()->
	[?_assertEqual({[], []}, dequeue({[], []})),%happy path
	?_assertEqual({[2,3], [6,5,4]}, dequeue({[1,2,3], [6,5,4]})),%happy path
	?_assertEqual({[4,5,6], []}, dequeue({[3], [6,5,4]})),%happy path
	?_assertEqual({[], []}, dequeue({[3], []})),%happy path
    %nasty thoughts start here
    ?_assertEqual(fail, dequeue({not_list, []})),
    ?_assertEqual(fail, dequeue({[], not_list}))].


enqueue_front_test_()->
	[?_assertEqual({[1], []}, enqueue_front({[], []}, 1)),%happy path
	?_assertEqual({[2, 1], []}, enqueue_front({[1], []}, 2)),%happy path
	?_assertEqual({[3, 2, 1], []}, enqueue_front({[2, 1], []}, 3)),%happy path
	?_assertEqual({[4, 3, 2, 1], ["hi"]}, enqueue_front({[3, 2, 1], ["hi"]}, 4)),%happy path      
    ?_assertEqual({[atom, 4, 3, 2, 1], []}, enqueue_front({[4, 3, 2, 1], []}, atom))%happy path  
    %nasty thoughts start here
    ].

dequeue_back_test_()->
	[?_assertEqual({[2, 5, 6], [3, 6]}, dequeue_back({[2, 5, 6], [9, 3, 6]})),%happy path
	?_assertEqual({[3], [4]}, dequeue_back({[3], [7, 4]})),%happy path
	?_assertEqual({[5, 8], [4, 6, 8]}, dequeue_back({[5 ,8], [1, 4, 6, 8]})),%happy path
	?_assertEqual({[], [2]}, dequeue_back({[], [3, 2]})),%happy path      
    ?_assertEqual({[], []}, dequeue_back({[], [3]})),
    ?_assertEqual({[], [1,2,3]}, dequeue({[1,2,3], []})),
    %nasty thoughts start here
    ?_assertEqual(fail, dequeue_back('Hello world')),
    ?_assertEqual(fail, dequeue_back(this_isnt_a_variable)),
    ?_assertEqual(fail, dequeue_back([1, 3, 4]))].


-endif.